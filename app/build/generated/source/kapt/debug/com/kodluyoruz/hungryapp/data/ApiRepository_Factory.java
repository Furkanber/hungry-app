// Generated by Dagger (https://dagger.dev).
package com.kodluyoruz.hungryapp.data;

import com.kodluyoruz.hungryapp.data.local.LocalDataSource;
import com.kodluyoruz.hungryapp.data.remote.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class ApiRepository_Factory implements Factory<ApiRepository> {
  private final Provider<RemoteDataSource> remoteDataSourceProvider;

  private final Provider<LocalDataSource> localDataSourceProvider;

  public ApiRepository_Factory(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    this.remoteDataSourceProvider = remoteDataSourceProvider;
    this.localDataSourceProvider = localDataSourceProvider;
  }

  @Override
  public ApiRepository get() {
    return newInstance(remoteDataSourceProvider.get(), localDataSourceProvider.get());
  }

  public static ApiRepository_Factory create(Provider<RemoteDataSource> remoteDataSourceProvider,
      Provider<LocalDataSource> localDataSourceProvider) {
    return new ApiRepository_Factory(remoteDataSourceProvider, localDataSourceProvider);
  }

  public static ApiRepository newInstance(RemoteDataSource remoteDataSource,
      LocalDataSource localDataSource) {
    return new ApiRepository(remoteDataSource, localDataSource);
  }
}
