// Generated by Dagger (https://dagger.dev).
package com.kodluyoruz.hungryapp.di;

import com.kodluyoruz.hungryapp.data.remote.ApiService;
import com.kodluyoruz.hungryapp.data.remote.RemoteDataSource;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvideRemoteDataSourceFactory implements Factory<RemoteDataSource> {
  private final NetworkModule module;

  private final Provider<ApiService> apiServiceProvider;

  public NetworkModule_ProvideRemoteDataSourceFactory(NetworkModule module,
      Provider<ApiService> apiServiceProvider) {
    this.module = module;
    this.apiServiceProvider = apiServiceProvider;
  }

  @Override
  public RemoteDataSource get() {
    return provideRemoteDataSource(module, apiServiceProvider.get());
  }

  public static NetworkModule_ProvideRemoteDataSourceFactory create(NetworkModule module,
      Provider<ApiService> apiServiceProvider) {
    return new NetworkModule_ProvideRemoteDataSourceFactory(module, apiServiceProvider);
  }

  public static RemoteDataSource provideRemoteDataSource(NetworkModule instance,
      ApiService apiService) {
    return Preconditions.checkNotNullFromProvides(instance.provideRemoteDataSource(apiService));
  }
}
