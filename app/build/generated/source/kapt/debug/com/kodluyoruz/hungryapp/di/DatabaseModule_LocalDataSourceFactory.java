// Generated by Dagger (https://dagger.dev).
package com.kodluyoruz.hungryapp.di;

import com.kodluyoruz.hungryapp.data.local.LocalDataSource;
import com.kodluyoruz.hungryapp.data.local.SharedPrefManager;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DatabaseModule_LocalDataSourceFactory implements Factory<LocalDataSource> {
  private final DatabaseModule module;

  private final Provider<SharedPrefManager> sharedPrefManagerProvider;

  public DatabaseModule_LocalDataSourceFactory(DatabaseModule module,
      Provider<SharedPrefManager> sharedPrefManagerProvider) {
    this.module = module;
    this.sharedPrefManagerProvider = sharedPrefManagerProvider;
  }

  @Override
  public LocalDataSource get() {
    return localDataSource(module, sharedPrefManagerProvider.get());
  }

  public static DatabaseModule_LocalDataSourceFactory create(DatabaseModule module,
      Provider<SharedPrefManager> sharedPrefManagerProvider) {
    return new DatabaseModule_LocalDataSourceFactory(module, sharedPrefManagerProvider);
  }

  public static LocalDataSource localDataSource(DatabaseModule instance,
      SharedPrefManager sharedPrefManager) {
    return Preconditions.checkNotNullFromProvides(instance.localDataSource(sharedPrefManager));
  }
}
