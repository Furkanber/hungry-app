// Generated by Dagger (https://dagger.dev).
package com.kodluyoruz.hungryapp;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.kodluyoruz.hungryapp.data.ApiRepository;
import com.kodluyoruz.hungryapp.data.local.LocalDataSource;
import com.kodluyoruz.hungryapp.data.local.SharedPrefManager;
import com.kodluyoruz.hungryapp.data.remote.ApiService;
import com.kodluyoruz.hungryapp.data.remote.RemoteDataSource;
import com.kodluyoruz.hungryapp.di.DatabaseModule;
import com.kodluyoruz.hungryapp.di.DatabaseModule_LocalDataSourceFactory;
import com.kodluyoruz.hungryapp.di.DatabaseModule_SharedPrefManagerFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideApiServiceFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideEndPointFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideGsonFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideOkHttpClientFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideRemoteDataSourceFactory;
import com.kodluyoruz.hungryapp.di.NetworkModule_ProvideRetrofitFactory;
import com.kodluyoruz.hungryapp.ui.MainActivity;
import com.kodluyoruz.hungryapp.ui.add_address.AddAddressFragment;
import com.kodluyoruz.hungryapp.ui.add_address.AddAddressViewModel;
import com.kodluyoruz.hungryapp.ui.add_address.AddAddressViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.add_restaurant.AddRestaurantFragment;
import com.kodluyoruz.hungryapp.ui.add_restaurant.AddRestaurantViewModel;
import com.kodluyoruz.hungryapp.ui.add_restaurant.AddRestaurantViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.address_list.AddressListFragment;
import com.kodluyoruz.hungryapp.ui.address_list.AddressListViewModel;
import com.kodluyoruz.hungryapp.ui.address_list.AddressListViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.change_password.ChangePasswordFragment;
import com.kodluyoruz.hungryapp.ui.change_password.ChangePasswordViewModel;
import com.kodluyoruz.hungryapp.ui.change_password.ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.edit_profile.EditProfileFragment;
import com.kodluyoruz.hungryapp.ui.edit_profile.EditProfileViewModel;
import com.kodluyoruz.hungryapp.ui.edit_profile.EditProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.home.HomeFragment;
import com.kodluyoruz.hungryapp.ui.home.HomeFragmentViewModel;
import com.kodluyoruz.hungryapp.ui.home.HomeFragmentViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.login.LoginFragment;
import com.kodluyoruz.hungryapp.ui.login.LoginViewModel;
import com.kodluyoruz.hungryapp.ui.login.LoginViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.meal_adding.MealAddingFragment;
import com.kodluyoruz.hungryapp.ui.meal_adding.MealAddingViewModel;
import com.kodluyoruz.hungryapp.ui.meal_adding.MealAddingViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.meal_detail.MealDetailFragment;
import com.kodluyoruz.hungryapp.ui.meal_detail.MealDetailViewModel;
import com.kodluyoruz.hungryapp.ui.meal_detail.MealDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.onboarding.MainOnBoardingFragment;
import com.kodluyoruz.hungryapp.ui.order_history.OrderHistoryFragment;
import com.kodluyoruz.hungryapp.ui.order_history.OrderHistoryViewModel;
import com.kodluyoruz.hungryapp.ui.order_history.OrderHistoryViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.profile.ProfileFragment;
import com.kodluyoruz.hungryapp.ui.profile.ProfileViewModel;
import com.kodluyoruz.hungryapp.ui.profile.ProfileViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.register.RegisterFragment;
import com.kodluyoruz.hungryapp.ui.register.RegisterViewModel;
import com.kodluyoruz.hungryapp.ui.register.RegisterViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.restaurant_detail.RestaurantDetailFragment;
import com.kodluyoruz.hungryapp.ui.restaurant_detail.RestaurantDetailViewModel;
import com.kodluyoruz.hungryapp.ui.restaurant_detail.RestaurantDetailViewModel_HiltModules_KeyModule_ProvideFactory;
import com.kodluyoruz.hungryapp.ui.splash.SplashFragment;
import com.kodluyoruz.hungryapp.ui.splash.SplashViewModel;
import com.kodluyoruz.hungryapp.ui.splash.SplashViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.MemoizedSentinel;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerHungryApp_HiltComponents_SingletonC extends HungryApp_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final NetworkModule networkModule;

  private DaggerHungryApp_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, NetworkModule networkModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.networkModule = networkModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private Retrofit retrofit() {
    return NetworkModule_ProvideRetrofitFactory.provideRetrofit(networkModule, NetworkModule_ProvideOkHttpClientFactory.provideOkHttpClient(networkModule), NetworkModule_ProvideGsonFactory.provideGson(networkModule), NetworkModule_ProvideEndPointFactory.provideEndPoint(networkModule));
  }

  private ApiService apiService() {
    return NetworkModule_ProvideApiServiceFactory.provideApiService(networkModule, retrofit());
  }

  private RemoteDataSource remoteDataSource() {
    return NetworkModule_ProvideRemoteDataSourceFactory.provideRemoteDataSource(networkModule, apiService());
  }

  @Override
  public void injectHungryApp(HungryApp hungryApp) {
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder();
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder();
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public HungryApp_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerHungryApp_HiltComponents_SingletonC(applicationContextModule, networkModule);
    }
  }

  private final class ActivityRetainedCBuilder implements HungryApp_HiltComponents.ActivityRetainedC.Builder {
    @Override
    public HungryApp_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(new DatabaseModule());
    }
  }

  private final class ActivityRetainedCImpl extends HungryApp_HiltComponents.ActivityRetainedC {
    private final DatabaseModule databaseModule;

    private volatile Object lifecycle = new MemoizedSentinel();

    private ActivityRetainedCImpl(DatabaseModule databaseModuleParam) {
      this.databaseModule = databaseModuleParam;
    }

    private Object lifecycle() {
      Object local = lifecycle;
      if (local instanceof MemoizedSentinel) {
        synchronized (local) {
          local = lifecycle;
          if (local instanceof MemoizedSentinel) {
            local = ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();
            lifecycle = DoubleCheck.reentrantCheck(lifecycle, local);
          }
        }
      }
      return (Object) local;
    }

    private SharedPrefManager sharedPrefManager() {
      return DatabaseModule_SharedPrefManagerFactory.sharedPrefManager(databaseModule, ApplicationContextModule_ProvideContextFactory.provideContext(DaggerHungryApp_HiltComponents_SingletonC.this.applicationContextModule));
    }

    private LocalDataSource localDataSource() {
      return DatabaseModule_LocalDataSourceFactory.localDataSource(databaseModule, sharedPrefManager());
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder();
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycle();
    }

    private final class ActivityCBuilder implements HungryApp_HiltComponents.ActivityC.Builder {
      private Activity activity;

      @Override
      public ActivityCBuilder activity(Activity activity) {
        this.activity = Preconditions.checkNotNull(activity);
        return this;
      }

      @Override
      public HungryApp_HiltComponents.ActivityC build() {
        Preconditions.checkBuilderRequirement(activity, Activity.class);
        return new ActivityCImpl(activity);
      }
    }

    private final class ActivityCImpl extends HungryApp_HiltComponents.ActivityC {
      private ActivityCImpl(Activity activity) {

      }

      @Override
      public void injectMainActivity(MainActivity mainActivity) {
      }

      @Override
      public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
        return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(DaggerHungryApp_HiltComponents_SingletonC.this.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder());
      }

      @Override
      public Set<String> getViewModelKeys() {
        return SetBuilder.<String>newSetBuilder(14).add(AddAddressViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AddRestaurantViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(AddressListViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ChangePasswordViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(EditProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HomeFragmentViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(LoginViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MealAddingViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(MealDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(OrderHistoryViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(ProfileViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RegisterViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(RestaurantDetailViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SplashViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
      }

      @Override
      public ViewModelComponentBuilder getViewModelComponentBuilder() {
        return new ViewModelCBuilder();
      }

      @Override
      public FragmentComponentBuilder fragmentComponentBuilder() {
        return new FragmentCBuilder();
      }

      @Override
      public ViewComponentBuilder viewComponentBuilder() {
        return new ViewCBuilder();
      }

      private final class FragmentCBuilder implements HungryApp_HiltComponents.FragmentC.Builder {
        private Fragment fragment;

        @Override
        public FragmentCBuilder fragment(Fragment fragment) {
          this.fragment = Preconditions.checkNotNull(fragment);
          return this;
        }

        @Override
        public HungryApp_HiltComponents.FragmentC build() {
          Preconditions.checkBuilderRequirement(fragment, Fragment.class);
          return new FragmentCI(fragment);
        }
      }

      private final class FragmentCI extends HungryApp_HiltComponents.FragmentC {
        private FragmentCI(Fragment fragment) {

        }

        @Override
        public void injectAddAddressFragment(AddAddressFragment addAddressFragment) {
        }

        @Override
        public void injectAddRestaurantFragment(AddRestaurantFragment addRestaurantFragment) {
        }

        @Override
        public void injectAddressListFragment(AddressListFragment addressListFragment) {
        }

        @Override
        public void injectChangePasswordFragment(ChangePasswordFragment changePasswordFragment) {
        }

        @Override
        public void injectEditProfileFragment(EditProfileFragment editProfileFragment) {
        }

        @Override
        public void injectHomeFragment(HomeFragment homeFragment) {
        }

        @Override
        public void injectLoginFragment(LoginFragment loginFragment) {
        }

        @Override
        public void injectMealAddingFragment(MealAddingFragment mealAddingFragment) {
        }

        @Override
        public void injectMealDetailFragment(MealDetailFragment mealDetailFragment) {
        }

        @Override
        public void injectMainOnBoardingFragment(MainOnBoardingFragment mainOnBoardingFragment) {
        }

        @Override
        public void injectOrderHistoryFragment(OrderHistoryFragment orderHistoryFragment) {
        }

        @Override
        public void injectProfileFragment(ProfileFragment profileFragment) {
        }

        @Override
        public void injectRegisterFragment(RegisterFragment registerFragment) {
        }

        @Override
        public void injectRestaurantDetailFragment(
            RestaurantDetailFragment restaurantDetailFragment) {
        }

        @Override
        public void injectSplashFragment(SplashFragment splashFragment) {
        }

        @Override
        public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
          return ActivityCImpl.this.getHiltInternalFactoryFactory();
        }

        @Override
        public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
          return new ViewWithFragmentCBuilder();
        }

        private final class ViewWithFragmentCBuilder implements HungryApp_HiltComponents.ViewWithFragmentC.Builder {
          private View view;

          @Override
          public ViewWithFragmentCBuilder view(View view) {
            this.view = Preconditions.checkNotNull(view);
            return this;
          }

          @Override
          public HungryApp_HiltComponents.ViewWithFragmentC build() {
            Preconditions.checkBuilderRequirement(view, View.class);
            return new ViewWithFragmentCI(view);
          }
        }

        private final class ViewWithFragmentCI extends HungryApp_HiltComponents.ViewWithFragmentC {
          private ViewWithFragmentCI(View view) {

          }
        }
      }

      private final class ViewCBuilder implements HungryApp_HiltComponents.ViewC.Builder {
        private View view;

        @Override
        public ViewCBuilder view(View view) {
          this.view = Preconditions.checkNotNull(view);
          return this;
        }

        @Override
        public HungryApp_HiltComponents.ViewC build() {
          Preconditions.checkBuilderRequirement(view, View.class);
          return new ViewCI(view);
        }
      }

      private final class ViewCI extends HungryApp_HiltComponents.ViewC {
        private ViewCI(View view) {

        }
      }
    }

    private final class ViewModelCBuilder implements HungryApp_HiltComponents.ViewModelC.Builder {
      private SavedStateHandle savedStateHandle;

      @Override
      public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
        this.savedStateHandle = Preconditions.checkNotNull(handle);
        return this;
      }

      @Override
      public HungryApp_HiltComponents.ViewModelC build() {
        Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
        return new ViewModelCImpl(savedStateHandle);
      }
    }

    private final class ViewModelCImpl extends HungryApp_HiltComponents.ViewModelC {
      private volatile Provider<AddAddressViewModel> addAddressViewModelProvider;

      private volatile Provider<AddRestaurantViewModel> addRestaurantViewModelProvider;

      private volatile Provider<AddressListViewModel> addressListViewModelProvider;

      private volatile Provider<ChangePasswordViewModel> changePasswordViewModelProvider;

      private volatile Provider<EditProfileViewModel> editProfileViewModelProvider;

      private volatile Provider<HomeFragmentViewModel> homeFragmentViewModelProvider;

      private volatile Provider<LoginViewModel> loginViewModelProvider;

      private volatile Provider<MealAddingViewModel> mealAddingViewModelProvider;

      private volatile Provider<MealDetailViewModel> mealDetailViewModelProvider;

      private volatile Provider<OrderHistoryViewModel> orderHistoryViewModelProvider;

      private volatile Provider<ProfileViewModel> profileViewModelProvider;

      private volatile Provider<RegisterViewModel> registerViewModelProvider;

      private volatile Provider<RestaurantDetailViewModel> restaurantDetailViewModelProvider;

      private volatile Provider<SplashViewModel> splashViewModelProvider;

      private ViewModelCImpl(SavedStateHandle savedStateHandle) {

      }

      private ApiRepository apiRepository() {
        return new ApiRepository(DaggerHungryApp_HiltComponents_SingletonC.this.remoteDataSource(), ActivityRetainedCImpl.this.localDataSource());
      }

      private AddAddressViewModel addAddressViewModel() {
        return new AddAddressViewModel(apiRepository());
      }

      private Provider<AddAddressViewModel> addAddressViewModelProvider() {
        Object local = addAddressViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(0);
          addAddressViewModelProvider = (Provider<AddAddressViewModel>) local;
        }
        return (Provider<AddAddressViewModel>) local;
      }

      private AddRestaurantViewModel addRestaurantViewModel() {
        return new AddRestaurantViewModel(apiRepository());
      }

      private Provider<AddRestaurantViewModel> addRestaurantViewModelProvider() {
        Object local = addRestaurantViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(1);
          addRestaurantViewModelProvider = (Provider<AddRestaurantViewModel>) local;
        }
        return (Provider<AddRestaurantViewModel>) local;
      }

      private AddressListViewModel addressListViewModel() {
        return new AddressListViewModel(apiRepository());
      }

      private Provider<AddressListViewModel> addressListViewModelProvider() {
        Object local = addressListViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(2);
          addressListViewModelProvider = (Provider<AddressListViewModel>) local;
        }
        return (Provider<AddressListViewModel>) local;
      }

      private ChangePasswordViewModel changePasswordViewModel() {
        return new ChangePasswordViewModel(apiRepository());
      }

      private Provider<ChangePasswordViewModel> changePasswordViewModelProvider() {
        Object local = changePasswordViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(3);
          changePasswordViewModelProvider = (Provider<ChangePasswordViewModel>) local;
        }
        return (Provider<ChangePasswordViewModel>) local;
      }

      private EditProfileViewModel editProfileViewModel() {
        return new EditProfileViewModel(apiRepository());
      }

      private Provider<EditProfileViewModel> editProfileViewModelProvider() {
        Object local = editProfileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(4);
          editProfileViewModelProvider = (Provider<EditProfileViewModel>) local;
        }
        return (Provider<EditProfileViewModel>) local;
      }

      private HomeFragmentViewModel homeFragmentViewModel() {
        return new HomeFragmentViewModel(apiRepository());
      }

      private Provider<HomeFragmentViewModel> homeFragmentViewModelProvider() {
        Object local = homeFragmentViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(5);
          homeFragmentViewModelProvider = (Provider<HomeFragmentViewModel>) local;
        }
        return (Provider<HomeFragmentViewModel>) local;
      }

      private LoginViewModel loginViewModel() {
        return new LoginViewModel(apiRepository());
      }

      private Provider<LoginViewModel> loginViewModelProvider() {
        Object local = loginViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(6);
          loginViewModelProvider = (Provider<LoginViewModel>) local;
        }
        return (Provider<LoginViewModel>) local;
      }

      private MealAddingViewModel mealAddingViewModel() {
        return new MealAddingViewModel(apiRepository());
      }

      private Provider<MealAddingViewModel> mealAddingViewModelProvider() {
        Object local = mealAddingViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(7);
          mealAddingViewModelProvider = (Provider<MealAddingViewModel>) local;
        }
        return (Provider<MealAddingViewModel>) local;
      }

      private MealDetailViewModel mealDetailViewModel() {
        return new MealDetailViewModel(apiRepository());
      }

      private Provider<MealDetailViewModel> mealDetailViewModelProvider() {
        Object local = mealDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(8);
          mealDetailViewModelProvider = (Provider<MealDetailViewModel>) local;
        }
        return (Provider<MealDetailViewModel>) local;
      }

      private OrderHistoryViewModel orderHistoryViewModel() {
        return new OrderHistoryViewModel(apiRepository());
      }

      private Provider<OrderHistoryViewModel> orderHistoryViewModelProvider() {
        Object local = orderHistoryViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(9);
          orderHistoryViewModelProvider = (Provider<OrderHistoryViewModel>) local;
        }
        return (Provider<OrderHistoryViewModel>) local;
      }

      private ProfileViewModel profileViewModel() {
        return new ProfileViewModel(apiRepository());
      }

      private Provider<ProfileViewModel> profileViewModelProvider() {
        Object local = profileViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(10);
          profileViewModelProvider = (Provider<ProfileViewModel>) local;
        }
        return (Provider<ProfileViewModel>) local;
      }

      private RegisterViewModel registerViewModel() {
        return new RegisterViewModel(apiRepository());
      }

      private Provider<RegisterViewModel> registerViewModelProvider() {
        Object local = registerViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(11);
          registerViewModelProvider = (Provider<RegisterViewModel>) local;
        }
        return (Provider<RegisterViewModel>) local;
      }

      private RestaurantDetailViewModel restaurantDetailViewModel() {
        return new RestaurantDetailViewModel(apiRepository());
      }

      private Provider<RestaurantDetailViewModel> restaurantDetailViewModelProvider() {
        Object local = restaurantDetailViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(12);
          restaurantDetailViewModelProvider = (Provider<RestaurantDetailViewModel>) local;
        }
        return (Provider<RestaurantDetailViewModel>) local;
      }

      private SplashViewModel splashViewModel() {
        return new SplashViewModel(apiRepository());
      }

      private Provider<SplashViewModel> splashViewModelProvider() {
        Object local = splashViewModelProvider;
        if (local == null) {
          local = new SwitchingProvider<>(13);
          splashViewModelProvider = (Provider<SplashViewModel>) local;
        }
        return (Provider<SplashViewModel>) local;
      }

      @Override
      public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
        return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(14).put("com.kodluyoruz.hungryapp.ui.add_address.AddAddressViewModel", (Provider) addAddressViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.add_restaurant.AddRestaurantViewModel", (Provider) addRestaurantViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.address_list.AddressListViewModel", (Provider) addressListViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.change_password.ChangePasswordViewModel", (Provider) changePasswordViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.edit_profile.EditProfileViewModel", (Provider) editProfileViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.home.HomeFragmentViewModel", (Provider) homeFragmentViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.login.LoginViewModel", (Provider) loginViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.meal_adding.MealAddingViewModel", (Provider) mealAddingViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.meal_detail.MealDetailViewModel", (Provider) mealDetailViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.order_history.OrderHistoryViewModel", (Provider) orderHistoryViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.profile.ProfileViewModel", (Provider) profileViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.register.RegisterViewModel", (Provider) registerViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.restaurant_detail.RestaurantDetailViewModel", (Provider) restaurantDetailViewModelProvider()).put("com.kodluyoruz.hungryapp.ui.splash.SplashViewModel", (Provider) splashViewModelProvider()).build();
      }

      private final class SwitchingProvider<T> implements Provider<T> {
        private final int id;

        SwitchingProvider(int id) {
          this.id = id;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T get() {
          switch (id) {
            case 0: // com.kodluyoruz.hungryapp.ui.add_address.AddAddressViewModel 
            return (T) ViewModelCImpl.this.addAddressViewModel();

            case 1: // com.kodluyoruz.hungryapp.ui.add_restaurant.AddRestaurantViewModel 
            return (T) ViewModelCImpl.this.addRestaurantViewModel();

            case 2: // com.kodluyoruz.hungryapp.ui.address_list.AddressListViewModel 
            return (T) ViewModelCImpl.this.addressListViewModel();

            case 3: // com.kodluyoruz.hungryapp.ui.change_password.ChangePasswordViewModel 
            return (T) ViewModelCImpl.this.changePasswordViewModel();

            case 4: // com.kodluyoruz.hungryapp.ui.edit_profile.EditProfileViewModel 
            return (T) ViewModelCImpl.this.editProfileViewModel();

            case 5: // com.kodluyoruz.hungryapp.ui.home.HomeFragmentViewModel 
            return (T) ViewModelCImpl.this.homeFragmentViewModel();

            case 6: // com.kodluyoruz.hungryapp.ui.login.LoginViewModel 
            return (T) ViewModelCImpl.this.loginViewModel();

            case 7: // com.kodluyoruz.hungryapp.ui.meal_adding.MealAddingViewModel 
            return (T) ViewModelCImpl.this.mealAddingViewModel();

            case 8: // com.kodluyoruz.hungryapp.ui.meal_detail.MealDetailViewModel 
            return (T) ViewModelCImpl.this.mealDetailViewModel();

            case 9: // com.kodluyoruz.hungryapp.ui.order_history.OrderHistoryViewModel 
            return (T) ViewModelCImpl.this.orderHistoryViewModel();

            case 10: // com.kodluyoruz.hungryapp.ui.profile.ProfileViewModel 
            return (T) ViewModelCImpl.this.profileViewModel();

            case 11: // com.kodluyoruz.hungryapp.ui.register.RegisterViewModel 
            return (T) ViewModelCImpl.this.registerViewModel();

            case 12: // com.kodluyoruz.hungryapp.ui.restaurant_detail.RestaurantDetailViewModel 
            return (T) ViewModelCImpl.this.restaurantDetailViewModel();

            case 13: // com.kodluyoruz.hungryapp.ui.splash.SplashViewModel 
            return (T) ViewModelCImpl.this.splashViewModel();

            default: throw new AssertionError(id);
          }
        }
      }
    }
  }

  private final class ServiceCBuilder implements HungryApp_HiltComponents.ServiceC.Builder {
    private Service service;

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public HungryApp_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(service);
    }
  }

  private final class ServiceCImpl extends HungryApp_HiltComponents.ServiceC {
    private ServiceCImpl(Service service) {

    }
  }
}
